import std::fs
import std::shift_args
import std::libc::unistd::chdir
import git::{this, get_object, create_object}


def main(argc: i32, argv: &str) {
    shift_args(&argc, &argv)
    let subcommand = shift_args(&argc, &argv)

    match subcommand {
        "init" => initialize_repo(argc, argv)
        "cat-file" => cat_file(argc, argv)
        "hash-object" => hash_object(argc, argv)
        else => std::panic("Wrong subcommand, stupid!")
    }
}

def initialize_repo(argc: i32, argv: &str) {
    if argc > 0 {
        let dir = shift_args(&argc, &argv)
        if fs::directory_exists(dir) std::panic("Error: Directory exists")
        fs::create_directory(dir)
        chdir(dir)
    }

    if fs::directory_exists(".git") std::panic("Error: Repo exists")
    fs::create_directory(".git")
    fs::create_directory(".git/hooks")
    fs::create_directory(".git/info")
    fs::create_directory(".git/objects")
    fs::create_directory(".git/refs")
    fs::create_directory(".git/refs/heads")
    fs::create_directory(".git/refs/tags")
    fs::write_file_str(".git/HEAD", "ref: refs/heads/main\n")
    fs::write_file_str(".git/config", "")
    fs::write_file_str(".git/description", "Unnamed repository; edit this file 'description' to name the repository.")
}


def cat_file(argc: i32, argv: &str) {
    let hash = shift_args(&argc, &argv)
    let contents = get_object(hash)
    print(f"{contents}")
}

def hash_object(argc: i32, argv: &str) {
    let file = shift_args(&argc, &argv)
    let write = false 

    if file == "-w" {
        write = true
        file = shift_args(&argc, &argv)
    }

    let object = create_object(file)
    let hash = git::hash_object(object, write)
    println(f"Object successfully hashed: {hash}")
}


// ocen main.oc && ./test.sh ./out init